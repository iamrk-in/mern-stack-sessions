collection name: 'restaurants'
1. display all the documents in the collection
>>> db.restaurants.find()

2. display the fields: restaurant_id, name, borough, cuisine, of all ducuments
>>> db.restaurants.find({}, {"restaurant_id": 1, "name": 1, "borough": 1, "cusine": 1})

3. display the fields: restaurant_id, name, borough, cuisine but exclude the field: _id 
>>> db.restaurants.find({}, {"_id": 0, "restaurant_id": 1, "name": 1, "borough": 1, "cusine": 1})

4. display the fields: restaurant_id, name, borough and zip code but exclude field: _id
>>> db.restaurants.find({}, {"restaurant_id": 1, "name": 1, "borough": 1, "address.zipcode": 1, "_id": 0})

5. display all the restaurant which is 'borough' : 'Bronx'
>>> db.restaurants.find({"borough": "Bronx"})

6. display the first 5 restaurants which is in 'borough': 'Bronx'
>>> db.restaurants.find({"borough": "Bronx"}).limit(5)

7. display the next 5 restaurants after skipping first 5 restaurants are in 'borough': 'Bronx'
>>> db.restaurants.find({"borough": "Bronx"}).limit(5).skip(5)

8. display the restaurants who achieved a score more than a given number
>>> db.restaurants.find({grades: {$elemMatch: {"score": {$gt: 10}}}})

9. display the restaurants that achieved a score, more than 80 but less than 100
>>> db.restaurants.find({grades: {$elemMatch: {"score": {$gt: 80, $lt: 100}}}})

10. display the restaurants which locate in latitude value less than -90.457532
>>> db.restaurants.find({"address.coord": {$lt: -90.457532}})

11. display the restaurants which do not prepare any cuisine of 'american' and achieved a score more than 70 and located in the latitude less than -75.32463
>>> db.restaurants.find({
    "cuisine": {$ne: "American "}, 
    "grades.score": {$gt: 70}, 
    "address.coord": {$lt: -65.32463}
});

12. display the restaurants which do not prepare any cuisine of "American " and achieved a score more than 70 and located in the longitutde less than 65.87543
>>> db.restaurants.find({
    "cuisine": {$ne: "American "}, 
    "grades.score": {$gt: 70}, 
    "address.coord": {$lt: 65.32463}
});


13. display the restaurants which do not prepare any cuisine of "American " and achieved the grade point "A" not belongs to the borough - brooklyn
>>> db.restaurants.find({
    "cuisine": {$ne: "American "}, 
    "grades.grade": {$eq: "A"}, 
    "borough": {$ne: "Brooklyn"}
});

14. display the restaurants with id, name, borough and cuisine for those restaurants which contain 'W'
>>> db.restaurants.find({"name": /^Wh/}, {
    "restaurant_id": 1, 
    "name": 1, 
    "borough": 1, 
    "cuisine": 1
});

15. display the restaurants with id, name, borough and cuisine for those restaurants which contains 'ar' as the last 2 characters 
>>> db.restaurants.find({"name": /ar$/}, {
    "restaurant_id": 1, 
    "name": 1, 
    "borough": 1, 
    "cuisine": 1
});

16. display the restaurants with id, name, borough and cuisine and cuisine for those restaurants which contain 'Reg' as 3 letters sommewhere in th name
>>> db.restaurants.find({"name": /.*Reg.*/}, {
    "restaurant_id": 1, 
    "name": 1, 
    "borough": 1, 
    "cuisine": 1
});

17. find the restaurants which belong to the borough Bronx, and prepared with American or Chinese
>>> db.restaurants.find(
    {"borough": "Bronx", $or: 
    [{
        "cuisine": "American ", 
        "cuisine": "Chinese"
    }]
});

18. find the restaurants with id, name, borough and cuisine for those restaurants which belong to the borough "Staten Island" etc., 
>>> db.restaurants.find(
    {"borough": {$in: ["Staten Island", "Queens"]}}, 
    {
        "restaurant_id": 1, 
        "name": 1, 
        "borough": 1, 
        "cuisine": 1
    }
);

19. find the restaurants with id, name, borough and cuisine for those restaurants which not belong to the borough "Staten Island" etc., 
>>> db.restaurants.find(
    {"borough": {$ne: ["Staten Island", "Queens"]}}, 
    {
        "restaurant_id": 1, 
        "name": 1, 
        "borough": 1, 
        "cuisine": 1
    }
);

20. find the restaurants with id, name, borough and cuisine for those restaurants which achieved a score which is not more than 10
>>> db.restaurants.find(
    {
        "grades.score": {
            $not: {
                $gt: 10
            }
        }
    },
    {
        "restaurant_id": 1, 
        "name": 1, 
        "borough": 1, 
        "cuisine": 1
    }
);

21. find the restaurants with id, name, borough and cuisine for those restaurants which prepared dish except "American " and "Chinese" or restaurants names begins with letter "W"
>>> db.restaurants.find({
        $or: [
            {"name": /^W/}, 
            {"$and": [
                {"cuisine": {$ne: "American "}}, 
                {"cuisine": {$ne: "Chinese"}}
            ]}
        ]}, 
        {
            "restaurant_id": 1, 
            "name": 1, 
            "borough": 1, 
            "cuisine": 1    
        }
    );

22. find the restaurants with id, name, borough, cuisine and grades for those restaurants which achieved a grade "A" and scored 11 on the date: "2014-03-03T00:00:00.000+00:00" among many of survey dates
>>> db.restaurants.find(
        {
            "grades.date": ISODate("2014-03-03T00:00:00.000+00:00"), 
            "grades.grade": "A", 
            "grades.score": 11
        }, 
        {
            "restaurant_id": 1, 
            "name": 1, 
            "borough": 1, 
            "cuisine": 1, 
            "grades": 1
        }
);

23. find the restaurants with id, name, borough, cuisine, and grades for those restaurants where the 2nd element of grades array contains a grade of "A" and score 9 on an ISODate of ""
>>> db.restaurants.find(
        {
            "grades.1.date": ISODate("2014-03-03T00:00:00.000+00:00"), 
            "grades.1.grade": "A", 
            "grades.1.score": 9
        }, 
        {
            "restaurant_id": 1, 
            "name": 1, 
            "borough": 1, 
            "cuisine": 1, 
            "grades": 1
        }
);

24. get the restaurants to arrange the name of the restaurants in ascending order along with all columns;
>>> db.restaurants.find().sort({"name": 1}).limit(5)

25. find the restaurants to arrange the name of the cuisine in ascending order and for that same cuisine borough should be in descending order
>>> db.restaurants.find().sort({"cuisine": 1, "borough": -1}).limit(5)

26. find the restaurants select all documents in restaurants collection where address contains street or not
>>> db.restaurants.find({"address.street": {$exists: true}}).limit(5)